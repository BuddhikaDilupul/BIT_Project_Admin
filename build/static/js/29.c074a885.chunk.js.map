{"version":3,"sources":["components/alert/Alert.js","components/modal/Modal.js","views/category/AddCategory.js"],"names":["Alert","props","color","data","alertMsg","Modal","backdrop","visible","open","onClose","close","titleModal","descModal","onClick","itemID","React","memo","AddCategory","loadingButton","setLoadingButton","useState","serverAlert","setServerAlert","alertDetails","setAlertDetails","setVisible","history","useHistory","imageFile","setImageFile","register","handleSubmit","watch","formState","errors","useForm","mode","name","convertBase64","file","Promise","resolve","reject","fileReader","FileReader","readAsDataURL","onload","result","onerror","error","xs","push","sm","className","onSubmit","async","category","categoryName","image","_data","fetch","process","method","headers","Authorization","localStorage","getItem","body","JSON","stringify","status","console","htmlFor","type","id","placeholder","invalid","CategoryName","required","pattern","value","message","style","size","onChange","e","target","files","base64","uploadImage","component","variant","undefined"],"mappings":"6KAAA,0BAceA,IAVAC,GAEX,mCACE,cAAC,IAAD,CAAQC,MAAOD,EAAME,KAAKD,MAA1B,SACE,iCAASD,EAAME,KAAKC,gB,iCCR5B,qCAGA,MAAMC,EAASJ,GAEX,mCACE,eAAC,IAAD,CAAQK,SAAS,SAASC,QAASN,EAAMO,KAAMC,QAAS,IAAMR,EAAMS,QAApE,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UAAcT,EAAMU,eAEtB,cAAC,IAAD,UAAaV,EAAMW,YACnB,eAAC,IAAD,WACE,cAAC,IAAD,CAASV,MAAM,YAAYW,QAAS,IAAMZ,EAAMS,QAAhD,mBAGA,cAAC,IAAD,CACER,MAAM,UACNW,QAAS,KACPZ,EAAME,KAAKF,EAAMa,QACjBb,EAAMS,SAJV,wBAcKK,QAAMC,KAAKX,I,iCC7B1B,8GAkBe,SAASY,IACtB,MAAOC,EAAeC,GAAoBC,oBAAS,GACnD,IAAKC,EAAaC,GAAkBF,oBAAS,GAC7C,MAAOG,EAAcC,GAAmBJ,mBAAS,CAAEhB,SAAU,GAAIF,MAAO,aACjEK,EAASkB,GAAcL,oBAAS,GACjCM,EAAUC,eACTC,EAAWC,GAAgBT,mBAAS,KAErC,SACJU,EADI,aAEJC,EAFI,MAGJC,EACAC,WAAW,OAAEC,IACXC,YAAQ,CAAEC,KAAM,aACdC,EAAOL,EAAM,gBAmDbM,EAAiBC,GACd,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAa,IAAIC,WACvBD,EAAWE,cAAcN,GACzBI,EAAWG,OAAS,KAClBL,EAAQE,EAAWI,SAErBJ,EAAWK,QAAWC,IACpBP,EAAOO,OAab,OACE,qCACE,cAAC,IAAD,CAAMC,GAAI,EAAV,SAAc7B,EAAc,cAAC,IAAD,CAAOlB,KAAMoB,IAAmB,OAC5D,cAAC,IAAD,CACEf,KAAMD,EACNG,MAAOe,EACPtB,KAbU,KACduB,EAAQyB,KAAK,gBAaTtC,QAAS,KAVbY,GAAW,IAaPd,WAAY,uBACZC,UAAW,8BACXL,QAASA,IAEX,cAAC,IAAD,UACE,cAAC,IAAD,CAAM2C,GAAI,GAAIE,GAAI,EAAlB,SACE,eAAC,IAAD,CAAOC,UAAU,OAAjB,UACE,cAAC,IAAD,UACE,oDAEF,cAAC,IAAD,UACE,eAAC,IAAD,CAAOC,SAAUvB,GA3FZwB,UACf,IAAIC,EAAW,CACbC,aAAcpB,EACdqB,MAAO9B,GAET,IACET,GAAiB,GACjBG,GAAe,GACf,MAAMqC,QAAcC,MAAM,GAAD,OAAIC,yCAAJ,iBAAsD,CAC7EC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,cAAe,UAAYC,aAAaC,QAAQ,cAElDC,KAAMC,KAAKC,UAAUb,KAEF,MAAjBG,EAAMW,SACRnD,GAAiB,GACjBM,GAAW,GACXD,EAAgB,CAAEpB,SAAU,uBAAwBF,MAAO,aAExC,MAAjByD,EAAMW,SACRnD,GAAiB,GACjBG,GAAe,GACfE,EAAgB,CAAEpB,SAAU,yBAA0BF,MAAO,aAE1C,MAAjByD,EAAMW,SACRnD,GAAiB,GACjBG,GAAe,GACfE,EAAgB,CACdpB,SAAU,kEACVF,MAAO,aAGX,MAAO+C,GACPsB,QAAQtB,MAAM,SAAUA,GACxB3B,GAAe,GACfE,EAAgB,CAAEpB,SAAU,sCAAuCF,MAAO,eAsDlE,UACE,sBAAKmD,UAAU,OAAf,UACE,cAAC,IAAD,CAAYmB,QAAQ,2BAApB,2BACA,cAAC,IAAD,CACEC,KAAK,OACLC,GAAG,eACHrC,KAAK,eACLsC,YAAY,aACZC,UAAS1C,EAAO2C,gBACZ/C,EAAS,eAAgB,CAC3BgD,SAAU,WACVC,QAAS,CACPC,MAAO,eACPC,QAAS,wBAId/C,EAAO2C,cACN,sBAAMK,MAAO,CAAEhF,MAAO,OAAtB,SAAgCgC,EAAO2C,aAAaI,aAGxD,sBAAK5B,UAAU,OAAf,UACE,cAAC,IAAD,CAAYmB,QAAQ,aAApB,wBACA,cAAC,IAAD,CACEC,KAAK,OACLU,KAAK,KACL9C,KAAK,gBACL+C,SAAWC,GA5ET9B,WAClB,MAAMhB,EAAO8C,EAAEC,OAAOC,MAAM,GACtBC,QAAelD,EAAcC,GACnCV,EAAa2D,IAyEoBC,CAAYJ,GAC7BX,GAAG,aACHI,UAAQ,OAIZ,eAAC,IAAD,CAAS5E,MAAM,UAAUiF,KAAK,KAAK9B,UAAU,OAAOoB,KAAM,SAA1D,UACGvD,EACC,cAAC,IAAD,CAAUwE,UAAU,OAAOP,KAAK,KAAKQ,QAAQ,OAAO,cAAY,cAC9DC,EACH1E,EAAgB,UAAY","file":"static/js/29.c074a885.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { CAlert } from '@coreui/react'\n\nconst Alert = (props) => {\n  return (\n    <>\n      <CAlert color={props.data.color}>\n        <strong>{props.data.alertMsg}</strong>\n      </CAlert>\n    </>\n  )\n}\n\nexport default Alert\nAlert.propTypes = {\n  data: PropTypes.object,\n}\n","import React from 'react'\nimport { CButton, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle } from '@coreui/react'\nimport PropTypes from 'prop-types'\nconst Modal = (props) => {\n  return (\n    <>\n      <CModal backdrop=\"static\" visible={props.open} onClose={() => props.close()}>\n        <CModalHeader>\n          <CModalTitle>{props.titleModal}</CModalTitle>\n        </CModalHeader>\n        <CModalBody>{props.descModal}</CModalBody>\n        <CModalFooter>\n          <CButton color=\"secondary\" onClick={() => props.close()}>\n            Close\n          </CButton>\n          <CButton\n            color=\"primary\"\n            onClick={() => {\n              props.data(props.itemID)\n              props.close()\n            }}\n          >\n            Ok\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </>\n  )\n}\nexport default React.memo(Modal)\nModal.propTypes = {\n  open: PropTypes.bool,\n  close: PropTypes.func,\n  onClick: PropTypes.func,\n  itemID: PropTypes.string,\n  data: PropTypes.func,\n  titleModal: PropTypes.string,\n  descModal: PropTypes.string,\n}\n","import React, { useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CRow,\n  CSpinner,\n} from '@coreui/react'\nimport Alert from 'src/components/alert/Alert'\nimport { useHistory } from 'react-router-dom'\nimport Modal from 'src/components/modal/Modal'\n\nexport default function AddCategory() {\n  const [loadingButton, setLoadingButton] = useState(false)\n  var [serverAlert, setServerAlert] = useState(false)\n  const [alertDetails, setAlertDetails] = useState({ alertMsg: '', color: 'success' })\n  const [visible, setVisible] = useState(false)\n  const history = useHistory()\n  const [imageFile, setImageFile] = useState('')\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: { errors },\n  } = useForm({ mode: 'onChange' })\n  const name = watch('CategoryName')\n\n  const onSubmit = async (data) => {\n    let category = {\n      categoryName: name,\n      image: imageFile,\n    }\n    try {\n      setLoadingButton(true)\n      setServerAlert(false)\n      const _data = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/category`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + localStorage.getItem('authToken'),\n        },\n        body: JSON.stringify(category),\n      })\n      if (_data.status === 201) {\n        setLoadingButton(false)\n        setVisible(true)\n        setAlertDetails({ alertMsg: 'Updated Successfully', color: 'success' })\n      }\n      if (_data.status === 409) {\n        setLoadingButton(false)\n        setServerAlert(true)\n        setAlertDetails({ alertMsg: 'Category already exist', color: 'warning' })\n      }\n      if (_data.status === 422) {\n        setLoadingButton(false)\n        setServerAlert(true)\n        setAlertDetails({\n          alertMsg: 'Please fill all values and check you entered values are correct',\n          color: 'warning',\n        })\n      }\n    } catch (error) {\n      console.error('Error:', error)\n      setServerAlert(true)\n      setAlertDetails({ alertMsg: 'Sorry! We are encountering an issue', color: 'danger' })\n    }\n  }\n\n  //image\n  const uploadImage = async (e) => {\n    const file = e.target.files[0]\n    const base64 = await convertBase64(file)\n    setImageFile(base64)\n  }\n\n  //converting to base64\n  const convertBase64 = (file) => {\n    return new Promise((resolve, reject) => {\n      const fileReader = new FileReader()\n      fileReader.readAsDataURL(file)\n      fileReader.onload = () => {\n        resolve(fileReader.result)\n      }\n      fileReader.onerror = (error) => {\n        reject(error)\n      }\n    })\n  }\n\n  //modal close and navigate\n  const toWhere = () => {\n    history.push('/categories')\n  }\n  const handleClose = () => {\n    setVisible(false)\n  }\n\n  return (\n    <>\n      <CCol xs={6}>{serverAlert ? <Alert data={alertDetails} /> : null}</CCol>\n      <Modal\n        open={visible}\n        close={setVisible}\n        data={toWhere}\n        onClick={() => {\n          handleClose()\n        }}\n        titleModal={'Updated Successfully'}\n        descModal={'New category has been added'}\n        visible={visible}\n      />\n      <CRow>\n        <CCol xs={12} sm={6}>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Add Category</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CForm onSubmit={handleSubmit(onSubmit)}>\n                <div className=\"mb-3\">\n                  <CFormLabel htmlFor=\"exampleFormControlInput1\">Category Name</CFormLabel>\n                  <CFormInput\n                    type=\"text\"\n                    id=\"CategoryName\"\n                    name=\"CategoryName\"\n                    placeholder=\"Burger Bun\"\n                    invalid={errors.CategoryName ? true : false}\n                    {...register('CategoryName', {\n                      required: 'Required',\n                      pattern: {\n                        value: /^[a-zA-Z ]+$/,\n                        message: 'Enter valid name',\n                      },\n                    })}\n                  />\n                  {errors.CategoryName && (\n                    <span style={{ color: 'red' }}>{errors.CategoryName.message}</span>\n                  )}\n                </div>\n                <div className=\"mb-3\">\n                  <CFormLabel htmlFor=\"formFileSm\">Image File</CFormLabel>\n                  <CFormInput\n                    type=\"file\"\n                    size=\"sm\"\n                    name=\"CategoryImage\"\n                    onChange={(e) => uploadImage(e)}\n                    id=\"formFileSm\"\n                    required\n                  />\n                </div>\n\n                <CButton color=\"primary\" size=\"sm\" className=\"px-4\" type={'submit'}>\n                  {loadingButton ? (\n                    <CSpinner component=\"span\" size=\"sm\" variant=\"grow\" aria-hidden=\"true\" />\n                  ) : undefined}\n                  {loadingButton ? 'Loading' : 'Save'}\n                </CButton>\n              </CForm>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n"],"sourceRoot":""}