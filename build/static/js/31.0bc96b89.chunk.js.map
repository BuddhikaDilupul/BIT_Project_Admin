{"version":3,"sources":["components/alert/Alert.js","components/modal/Modal.js","views/promotions/Promotions.js"],"names":["Alert","props","color","data","alertMsg","Modal","backdrop","visible","open","onClose","close","titleModal","descModal","onClick","itemID","React","memo","ChangePassword","register","handleSubmit","watch","formState","errors","useForm","mode","loadingButton","setLoadingButton","useState","text","setText","serverAlert","setServerAlert","alertDetails","setAlertDetails","setVisible","useEffect","xs","className","onSubmit","async","_data","fetch","process","method","headers","Authorization","localStorage","getItem","body","JSON","stringify","status","err","console","error","placeholder","id","name","style","height","invalid","promotion","required","message","htmlFor","type","icon","cilSend"],"mappings":"6KAAA,0BAceA,IAVAC,GAEX,mCACE,cAAC,IAAD,CAAQC,MAAOD,EAAME,KAAKD,MAA1B,SACE,iCAASD,EAAME,KAAKC,gB,iCCR5B,qCAGA,MAAMC,EAASJ,GAEX,mCACE,eAAC,IAAD,CAAQK,SAAS,SAASC,QAASN,EAAMO,KAAMC,QAAS,IAAMR,EAAMS,QAApE,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UAAcT,EAAMU,eAEtB,cAAC,IAAD,UAAaV,EAAMW,YACnB,eAAC,IAAD,WACE,cAAC,IAAD,CAASV,MAAM,YAAYW,QAAS,IAAMZ,EAAMS,QAAhD,mBAGA,cAAC,IAAD,CACER,MAAM,UACNW,QAAS,KACPZ,EAAME,KAAKF,EAAMa,QACjBb,EAAMS,SAJV,wBAcKK,QAAMC,KAAKX,I,iCC7B1B,8EAmHeY,UA9FQ,KACrB,MAAM,SACJC,EADI,aAEJC,EAFI,MAGJC,EACAC,WAAW,OAAEC,IACXC,YAAQ,CAAEC,KAAM,eAEbC,EAAeC,GAAoBC,oBAAS,IAC5CC,EAAMC,GAAWF,mBAAS,IACjC,IAAKG,EAAaC,GAAkBJ,oBAAS,GAC7C,MAAOK,EAAcC,GAAmBN,mBAAS,CAAEvB,SAAU,GAAIF,MAAO,aACjEK,EAAS2B,GAAcP,oBAAS,GA2CvC,OAFAQ,qBAAU,QAAU,IAGlB,mCACE,cAAC,IAAD,CAAMC,GAAI,EAAV,SACE,eAAC,IAAD,CAAOC,UAAU,OAAjB,UACE,eAAC,IAAD,WACE,qDADF,IACmC,wDAEnC,eAAC,IAAD,WACE,qBAAKA,UAAU,gBAAf,sBACA,eAAC,IAAD,CAAOC,SAAUnB,GAlDVoB,UACf,IACEb,GAAiB,GACjBQ,GAAW,GACX,MAAMM,QAAcC,MAAM,GAAD,OAAIC,yCAAJ,wBAA6D,CACpFC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,cAAe,UAAYC,aAAaC,QAAQ,cAElDC,KAAMC,KAAKC,UAAU/C,KAEF,MAAjBqC,EAAMW,QACRzB,GAAiB,GACjBQ,GAAW,GACXD,EAAgB,CAAE7B,SAAU,uBAAwBF,MAAO,aACjC,MAAjBsC,EAAMW,SACfzB,GAAiB,GACjBK,GAAe,GACfE,EAAgB,CAAE7B,SAAU,4BAA6BF,MAAO,YAElE6B,GAAe,GACfG,GAAW,GACX,MAAOkB,GACPC,QAAQC,MAAM,SAAUF,GACxB1B,GAAiB,GACjBK,GAAe,GACfE,EAAgB,CAAE7B,SAAU,eAAgBF,MAAO,gBAuB7C,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEmC,UAAU,OACVkB,YAAY,uBACZC,GAAG,oBACHC,KAAK,YACLC,MAAO,CAAEC,OAAQ,SACjBC,UAAStC,EAAOuC,aACZ3C,EAAS,YAAa,CACxB4C,SAAU,eAGbxC,EAAOuC,WACN,sBAAMH,MAAO,CAAExD,MAAO,OAAtB,SAAgCoB,EAAOuC,UAAUE,UAEnD,cAAC,IAAD,CAAYC,QAAQ,oBAApB,6BAEF,eAAC,IAAD,CAASC,KAAK,SAAd,UACE,cAAC,IAAD,CAAOC,KAAMC,IAAS9B,UAAU,SADlC","file":"static/js/31.0bc96b89.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { CAlert } from '@coreui/react'\n\nconst Alert = (props) => {\n  return (\n    <>\n      <CAlert color={props.data.color}>\n        <strong>{props.data.alertMsg}</strong>\n      </CAlert>\n    </>\n  )\n}\n\nexport default Alert\nAlert.propTypes = {\n  data: PropTypes.object,\n}\n","import React from 'react'\nimport { CButton, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle } from '@coreui/react'\nimport PropTypes from 'prop-types'\nconst Modal = (props) => {\n  return (\n    <>\n      <CModal backdrop=\"static\" visible={props.open} onClose={() => props.close()}>\n        <CModalHeader>\n          <CModalTitle>{props.titleModal}</CModalTitle>\n        </CModalHeader>\n        <CModalBody>{props.descModal}</CModalBody>\n        <CModalFooter>\n          <CButton color=\"secondary\" onClick={() => props.close()}>\n            Close\n          </CButton>\n          <CButton\n            color=\"primary\"\n            onClick={() => {\n              props.data(props.itemID)\n              props.close()\n            }}\n          >\n            Ok\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </>\n  )\n}\nexport default React.memo(Modal)\nModal.propTypes = {\n  open: PropTypes.bool,\n  close: PropTypes.func,\n  onClick: PropTypes.func,\n  itemID: PropTypes.string,\n  data: PropTypes.func,\n  titleModal: PropTypes.string,\n  descModal: PropTypes.string,\n}\n","import React, { useEffect, useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormFloating,\n  CFormInput,\n  CFormLabel,\n  CFormTextarea,\n  CRow,\n  CSpinner,\n} from '@coreui/react'\nimport Alert from 'src/components/alert/Alert'\nimport Modal from 'src/components/modal/Modal'\nimport CIcon from '@coreui/icons-react'\nimport { cilSend } from '@coreui/icons'\n\nconst ChangePassword = () => {\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: { errors },\n  } = useForm({ mode: 'onTouched' })\n\n  const [loadingButton, setLoadingButton] = useState(false)\n  const [text, setText] = useState('')\n  var [serverAlert, setServerAlert] = useState(false)\n  const [alertDetails, setAlertDetails] = useState({ alertMsg: '', color: 'success' })\n  const [visible, setVisible] = useState(false)\n\n  const onSubmit = async (data) => {\n    try {\n      setLoadingButton(false)\n      setVisible(false)\n      const _data = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/staff/promotion`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + localStorage.getItem('authToken'),\n        },\n        body: JSON.stringify(data),\n      })\n      if (_data.status === 200) {\n        setLoadingButton(false)\n        setVisible(true)\n        setAlertDetails({ alertMsg: 'Updated Successfully', color: 'success' })\n      } else if (_data.status === 400) {\n        setLoadingButton(false)\n        setServerAlert(true)\n        setAlertDetails({ alertMsg: 'Current Password is Wrong', color: 'danger' })\n      }\n      setServerAlert(false)\n      setVisible(true)\n    } catch (err) {\n      console.error('Error:', err)\n      setLoadingButton(false)\n      setServerAlert(true)\n      setAlertDetails({ alertMsg: 'Server Error', color: 'warning' })\n    }\n  }\n\n  function refreshPage() {\n    window.location.reload()\n  }\n\n  const handleClose = () => {\n    setVisible(false)\n  }\n\n  useEffect(() => {}, [])\n\n  return (\n    <>\n      <CCol xs={6}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Send Promotions</strong> <small>To all customers</small>\n          </CCardHeader>\n          <CCardBody>\n            <div className=\"col-auto mb-3\">To : All</div>\n            <CForm onSubmit={handleSubmit(onSubmit)}>\n              <CFormFloating>\n                <CFormTextarea\n                  className=\"mb-3\"\n                  placeholder=\"Leave a comment here\"\n                  id=\"floatingTextarea2\"\n                  name=\"promotion\"\n                  style={{ height: '100px' }}\n                  invalid={errors.promotion ? true : false}\n                  {...register('promotion', {\n                    required: 'Required',\n                  })}\n                ></CFormTextarea>\n                {errors.promotion && (\n                  <span style={{ color: 'red' }}>{errors.promotion.message}</span>\n                )}\n                <CFormLabel htmlFor=\"floatingTextarea2\">Type message</CFormLabel>\n              </CFormFloating>\n              <CButton type=\"submit\">\n                <CIcon icon={cilSend} className=\"me-2\" />\n                Send\n              </CButton>\n            </CForm>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </>\n  )\n}\n\nexport default ChangePassword\n"],"sourceRoot":""}