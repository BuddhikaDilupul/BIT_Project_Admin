{"version":3,"sources":["components/alert/Alert.js","views/reports/ProductIncome.js"],"names":["Alert","props","color","data","alertMsg","ProductIncomeReports","responseData","setResponseData","useState","count","setCount","display","setDisplay","pagination","setPegination","serverAlert","setServerAlert","alertDetails","setAlertDetails","loadingButton","setLoadingButton","state","setState","startDate","Date","endDate","addDays","key","ccyFormat","num","toFixed","clearData","splice","length","xs","sm","className","onChange","item","selection","showSelectionPreview","moveRangeOnFirstSelection","months","ranges","direction","maxDate","size","onClick","async","_data","fetch","process","method","headers","Authorization","localStorage","getItem","body","JSON","stringify","status","json","i","Math","ceil","products","push","productCount","err","console","log","loadData","component","variant","undefined","bordered","hover","scope","map","index","align","page","prevArray","handleShowData"],"mappings":"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","file":"static/js/35.4171a804.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { CAlert } from '@coreui/react'\n\nconst Alert = (props) => {\n  return (\n    <>\n      <CAlert color={props.data.color}>\n        <strong>{props.data.alertMsg}</strong>\n      </CAlert>\n    </>\n  )\n}\n\nexport default Alert\nAlert.propTypes = {\n  data: PropTypes.object,\n}\n","import React, { useEffect, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CPagination,\n  CPaginationItem,\n  CRow,\n  CSpinner,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport { CChartBar, CChartLine, CChartPie } from '@coreui/react-chartjs'\nimport 'react-date-range/dist/styles.css' // main css file\nimport 'react-date-range/dist/theme/default.css' // theme css file\nimport { addDays } from 'date-fns'\nimport { DateRangePicker } from 'react-date-range'\nimport { cilPen, cilTrash } from '@coreui/icons'\nimport CIcon from '@coreui/icons-react'\nimport Alert from 'src/components/alert/Alert'\n\nconst ProductIncomeReports = () => {\n  const [responseData, setResponseData] = useState({})\n  const [count, setCount] = useState({})\n  var [display, setDisplay] = useState([])\n  const [pagination, setPegination] = useState([])\n  const [serverAlert, setServerAlert] = useState(false)\n  const [alertDetails, setAlertDetails] = useState({ alertMsg: '', color: 'success' })\n  const [loadingButton, setLoadingButton] = useState(false)\n  const [state, setState] = useState([\n    {\n      startDate: new Date(),\n      endDate: addDays(new Date(), 0),\n      key: 'selection',\n    },\n  ])\n  function ccyFormat(num) {\n    return `${num.toFixed(2)}`\n  }\n  const loadData = async () => {\n    setServerAlert(false)\n    clearData()\n    try {\n      setLoadingButton(true)\n      const _data = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/reports/productIncome`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + localStorage.getItem('authToken'),\n        },\n        body: JSON.stringify({ state }),\n      })\n      if (_data.status === 200) {\n        const data = await _data.json()\n\n        for (let i = 1; i <= Math.ceil(data.products.length / 10); i++) {\n          pagination.push(i)\n        }\n\n        for (let i = 0; i < 10 && i < data.products.length; i++) {\n          display.push(data.products[i])\n        }\n        setLoadingButton(false)\n        setCount(data.productCount)\n        setResponseData(data.products)\n      }\n      if (_data.status === 404) {\n        setServerAlert(true)\n        setAlertDetails({ alertMsg: 'No data found', color: 'warning' })\n        setLoadingButton(false)\n      }\n      if (_data.status === 401) {\n        setServerAlert(true)\n        setLoadingButton(false)\n        setAlertDetails({ alertMsg: 'Unauthorized access', color: 'warning' })\n      }\n    } catch (err) {\n      console.log(err, 'error')\n    }\n  }\n\n  //clear all prev data\n  const clearData = () => {\n    display.splice(0, display.length)\n    pagination.splice(0, pagination.length)\n  }\n  const handleShowData = (page) => {\n    setDisplay((prevArray) => [])\n\n    for (let i = page * 10; i < (page + 1) * 10; i++) {\n      if (responseData[i] === undefined) {\n        break\n      }\n      setDisplay((prevArray) => [...prevArray, responseData[i]])\n    }\n  }\n  return (\n    <div>\n      <CCol xs={6}>{serverAlert ? <Alert data={alertDetails} /> : null}</CCol>\n      <CRow>\n        <CCol xs={12} sm={12}>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Product wise Income</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CForm className=\"row g-4\">\n                <div className=\"col-auto\">\n                  <DateRangePicker\n                    onChange={(item) => setState([item.selection])}\n                    showSelectionPreview={true}\n                    moveRangeOnFirstSelection={false}\n                    months={1}\n                    ranges={state}\n                    direction=\"horizontal\"\n                    maxDate={new Date()}\n                  />\n                </div>\n                <div className=\"col-auto\">\n                  <CButton\n                    color=\"primary\"\n                    size=\"sm\"\n                    className=\"px-4\"\n                    onClick={() => {\n                      loadData()\n                    }}\n                  >\n                    {loadingButton ? (\n                      <CSpinner component=\"span\" size=\"sm\" variant=\"grow\" aria-hidden=\"true\" />\n                    ) : undefined}\n                    {loadingButton ? 'Loading' : 'Generate'}\n                  </CButton>\n                </div>\n              </CForm>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      {responseData.length > 0 ? (\n        <>\n          <CRow>\n            <CCol xs={12} sm={6}>\n              <CCard className=\"mb-4\">\n                <CCardHeader>\n                  <strong>Product Income</strong>\n                </CCardHeader>\n\n                <CCardBody>\n                  <p className=\"text-medium-emphasis small\">\n                    Here the all Products of your shop with income.\n                  </p>\n                  <CTable bordered hover>\n                    <CTableHead color=\"dark\">\n                      <CTableRow>\n                        <CTableHeaderCell scope=\"col\">Product Name</CTableHeaderCell>\n                        <CTableHeaderCell scope=\"col\">Sold Count</CTableHeaderCell>\n                        <CTableHeaderCell scope=\"col\">Item Price</CTableHeaderCell>\n                        <CTableHeaderCell scope=\"col\">Total</CTableHeaderCell>\n                      </CTableRow>\n                    </CTableHead>\n                    <CTableBody>\n                      {display.map((item, index) => {\n                        return (\n                          <CTableRow key={index}>\n                            <CTableDataCell>{item[0]}</CTableDataCell>\n                            <CTableDataCell>{item[2]}</CTableDataCell>\n                            <CTableDataCell>LKR {ccyFormat(item[1])}</CTableDataCell>\n                            <CTableDataCell>LKR {ccyFormat(item[1] * item[2])}</CTableDataCell>\n                          </CTableRow>\n                        )\n                      })}\n                    </CTableBody>\n                  </CTable>\n                  <CPagination align=\"center\">\n                    {pagination.map((item, index) => {\n                      return (\n                        <CPaginationItem key={index} onClick={() => handleShowData(index)}>\n                          {item}\n                        </CPaginationItem>\n                      )\n                    })}\n                  </CPagination>\n                </CCardBody>\n              </CCard>\n            </CCol>\n          </CRow>\n        </>\n      ) : null}\n    </div>\n  )\n}\n\nexport default ProductIncomeReports\n"],"sourceRoot":""}