{"version":3,"sources":["components/alert/Alert.js","views/reports/TotalIncome.js"],"names":["Alert","props","color","data","alertMsg","Revenue","total","setTotal","useState","loadingButton","setLoadingButton","pagination","setPagination","dates","setDates","responseData","setResponseData","display","setDisplay","serverAlert","setServerAlert","alertDetails","setAlertDetails","state","setState","startDate","Date","endDate","addDays","key","clearData","splice","length","xs","sm","className","onChange","item","selection","showSelectionPreview","moveRangeOnFirstSelection","months","ranges","direction","maxDate","size","onClick","async","_data","fetch","process","method","headers","Authorization","localStorage","getItem","body","JSON","stringify","status","json","i","Math","ceil","totalIncome","push","err","console","log","loadData","component","variant","undefined","bordered","hover","scope","map","index","num","toFixed","align","page","prevArray","handleShowData","labels","datasets","label","backgroundColor"],"mappings":"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","file":"static/js/37.a43bda30.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { CAlert } from '@coreui/react'\n\nconst Alert = (props) => {\n  return (\n    <>\n      <CAlert color={props.data.color}>\n        <strong>{props.data.alertMsg}</strong>\n      </CAlert>\n    </>\n  )\n}\n\nexport default Alert\nAlert.propTypes = {\n  data: PropTypes.object,\n}\n","import React, { useState } from 'react'\nimport {\n  CBadge,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CPagination,\n  CPaginationItem,\n  CRow,\n  CSpinner,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport { CChartBar } from '@coreui/react-chartjs'\nimport 'react-date-range/dist/styles.css' // main css file\nimport 'react-date-range/dist/theme/default.css' // theme css file\nimport { addDays } from 'date-fns'\nimport { DateRangePicker } from 'react-date-range'\nimport Alert from 'src/components/alert/Alert'\nconst Revenue = () => {\n  const [total, setTotal] = useState([])\n  const [loadingButton, setLoadingButton] = useState(false)\n  const [pagination, setPagination] = useState([])\n  const [dates, setDates] = useState([])\n  var [responseData, setResponseData] = useState([])\n  var [display, setDisplay] = useState([])\n  const [serverAlert, setServerAlert] = useState(false)\n  const [alertDetails, setAlertDetails] = useState({ alertMsg: '', color: 'success' })\n  const [state, setState] = useState([\n    {\n      startDate: new Date(),\n      endDate: addDays(new Date(), 0),\n      key: 'selection',\n    },\n  ])\n  function ccyFormat(num) {\n    return `${num.toFixed(2)}`\n  }\n  const loadData = async () => {\n    clearData()\n    try {\n      setLoadingButton(true)\n      const _data = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/reports/income`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + localStorage.getItem('authToken'),\n        },\n        body: JSON.stringify({ state }),\n      })\n\n      if (_data.status === 200) {\n        setServerAlert(false)\n        const data = await _data.json()\n        for (let i = 1; i <= Math.ceil(data.totalIncome.length / 10); i++) {\n          pagination.push(i)\n        }\n        for (let i = 0; i < 10 && i < data.totalIncome.length; i++) {\n          display.push(data.totalIncome[i])\n        }\n        for (let i = 0; i < data.totalIncome.length; i++) {\n          total.push(data.totalIncome[i][1])\n          dates.push(data.totalIncome[i][0])\n        }\n        setResponseData(data.totalIncome)\n\n        setLoadingButton(false)\n      }\n      if (_data.status === 404) {\n        setServerAlert(true)\n        setAlertDetails({ alertMsg: 'No data found', color: 'warning' })\n        setLoadingButton(false)\n      }\n      if (_data.status === 401) {\n        setServerAlert(true)\n        setLoadingButton(false)\n        setAlertDetails({ alertMsg: 'Unauthorized access', color: 'warning' })\n      }\n    } catch (err) {\n      setServerAlert(true)\n      setAlertDetails({ alertMsg: 'Internal server Error', color: 'warning' })\n      console.log(err)\n    }\n  }\n  //clear all prev data\n  const clearData = () => {\n    display.splice(0, display.length)\n    responseData.splice(0, responseData.length)\n    pagination.splice(0, pagination.length)\n    total.splice(0, total.length)\n    dates.splice(0, dates.length)\n  }\n  const handleShowData = (page) => {\n    setDisplay((prevArray) => [])\n\n    for (let i = page * 10; i < (page + 1) * 10; i++) {\n      if (responseData[i] === undefined) {\n        break\n      }\n      setDisplay((prevArray) => [...prevArray, responseData[i]])\n    }\n  }\n  return (\n    <div>\n      <CCol xs={6}>{serverAlert ? <Alert data={alertDetails} /> : null}</CCol>\n      <CRow>\n        <CCol xs={12} sm={12}>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Overall Income</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CForm className=\"row g-4\">\n                <div className=\"col-auto\">\n                  <DateRangePicker\n                    onChange={(item) => setState([item.selection])}\n                    showSelectionPreview={true}\n                    moveRangeOnFirstSelection={false}\n                    months={1}\n                    ranges={state}\n                    direction=\"horizontal\"\n                    maxDate={new Date()}\n                  />\n                </div>\n                <div className=\"col-auto\">\n                  <CButton\n                    color=\"primary\"\n                    size=\"sm\"\n                    className=\"px-4\"\n                    onClick={() => {\n                      loadData()\n                    }}\n                  >\n                    {loadingButton ? (\n                      <CSpinner component=\"span\" size=\"sm\" variant=\"grow\" aria-hidden=\"true\" />\n                    ) : undefined}\n                    {loadingButton ? 'Loading' : 'Generate'}\n                  </CButton>\n                </div>\n              </CForm>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n\n      {responseData.length > 0 ? (\n        <>\n          <CRow>\n            <CCol xs={12} sm={6}>\n              <CCard className=\"mb-4\">\n                <CCardHeader>\n                  <strong>Income Report</strong>\n                </CCardHeader>\n\n                <CCardBody>\n                  <p className=\"text-medium-emphasis small\">Here the income report of your shop.</p>\n                  <CTable bordered hover>\n                    <CTableHead color=\"dark\">\n                      <CTableRow>\n                        <CTableHeaderCell scope=\"col\">Date</CTableHeaderCell>\n                        <CTableHeaderCell scope=\"col\">Total Income</CTableHeaderCell>\n                      </CTableRow>\n                    </CTableHead>\n                    <CTableBody>\n                      {display.map((item, index) => {\n                        return (\n                          <CTableRow key={index}>\n                            <CTableDataCell>{item[0]}</CTableDataCell>\n                            <CTableDataCell>LKR {ccyFormat(item[1])}</CTableDataCell>\n                          </CTableRow>\n                        )\n                      })}\n                    </CTableBody>\n                  </CTable>\n                  <CPagination align=\"center\">\n                    {pagination.map((item, index) => {\n                      return (\n                        <CPaginationItem key={index} onClick={() => handleShowData(index)}>\n                          {item}\n                        </CPaginationItem>\n                      )\n                    })}\n                  </CPagination>\n                </CCardBody>\n              </CCard>\n            </CCol>\n          </CRow>\n        </>\n      ) : null}\n      {total.length > 0 ? (\n        <CRow>\n          <CCol xs={12}>\n            <CCard className=\"mb-4\">\n              <CCardHeader>\n                <strong>Income of Your Shop </strong>\n              </CCardHeader>\n              <CCardBody>\n                <CChartBar\n                  data={{\n                    labels: dates,\n                    datasets: [\n                      {\n                        label: 'LKR',\n                        backgroundColor: '#f87979',\n                        data: total,\n                      },\n                    ],\n                  }}\n                  labels=\"months\"\n                />\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      ) : null}\n    </div>\n  )\n}\n\nexport default Revenue\n"],"sourceRoot":""}