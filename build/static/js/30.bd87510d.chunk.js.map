{"version":3,"sources":["components/alert/Alert.js","components/modal/Modal.js","views/profile/changePassword.js","views/profile/ChangeData.js","views/profile/Profile.js"],"names":["Alert","props","color","data","alertMsg","Modal","backdrop","visible","open","onClose","close","titleModal","descModal","onClick","itemID","React","memo","ChangePassword","register","handleSubmit","watch","formState","errors","useForm","mode","loadingButton","setLoadingButton","useState","serverAlert","setServerAlert","alertDetails","setAlertDetails","setVisible","password","useEffect","xs","window","location","reload","className","onSubmit","async","_data","fetch","process","method","headers","Authorization","localStorage","getItem","body","JSON","stringify","status","err","console","error","htmlFor","type","id","name","placeholder","invalid","current_password","required","style","message","pattern","value","Password2","validate","component","size","variant","undefined","ChangeData","reset","userData","setUserData","json","user","loadUserData","_id","userName","firstName","lastName","Profile"],"mappings":"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","file":"static/js/30.bd87510d.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { CAlert } from '@coreui/react'\n\nconst Alert = (props) => {\n  return (\n    <>\n      <CAlert color={props.data.color}>\n        <strong>{props.data.alertMsg}</strong>\n      </CAlert>\n    </>\n  )\n}\n\nexport default Alert\nAlert.propTypes = {\n  data: PropTypes.object,\n}\n","import React from 'react'\nimport { CButton, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle } from '@coreui/react'\nimport PropTypes from 'prop-types'\nconst Modal = (props) => {\n  return (\n    <>\n      <CModal backdrop=\"static\" visible={props.open} onClose={() => props.close()}>\n        <CModalHeader>\n          <CModalTitle>{props.titleModal}</CModalTitle>\n        </CModalHeader>\n        <CModalBody>{props.descModal}</CModalBody>\n        <CModalFooter>\n          <CButton color=\"secondary\" onClick={() => props.close()}>\n            Close\n          </CButton>\n          <CButton\n            color=\"primary\"\n            onClick={() => {\n              props.data(props.itemID)\n              props.close()\n            }}\n          >\n            Ok\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </>\n  )\n}\nexport default React.memo(Modal)\nModal.propTypes = {\n  open: PropTypes.bool,\n  close: PropTypes.func,\n  onClick: PropTypes.func,\n  itemID: PropTypes.string,\n  data: PropTypes.func,\n  titleModal: PropTypes.string,\n  descModal: PropTypes.string,\n}\n","import React, { useEffect, useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CRow,\n  CSpinner,\n} from '@coreui/react'\nimport Alert from 'src/components/alert/Alert'\nimport Modal from 'src/components/modal/Modal'\n\nconst ChangePassword = () => {\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: { errors },\n  } = useForm({ mode: 'onTouched' })\n\n  const [loadingButton, setLoadingButton] = useState(false)\n  var [serverAlert, setServerAlert] = useState(false)\n  const [alertDetails, setAlertDetails] = useState({ alertMsg: '', color: 'success' })\n  const [visible, setVisible] = useState(false)\n\n  const onSubmit = async (data) => {\n    setLoadingButton(false)\n    setServerAlert(false)\n    setVisible(true)\n    try {\n      setVisible(false)\n      const _data = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/staff/reset`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + localStorage.getItem('authToken'),\n        },\n        body: JSON.stringify(data),\n      })\n      if (_data.status === 200) {\n        setLoadingButton(false)\n        setVisible(true)\n        setAlertDetails({ alertMsg: 'Updated Successfully', color: 'success' })\n      } else if (_data.status === 400) {\n        setLoadingButton(false)\n        setServerAlert(true)\n        setAlertDetails({ alertMsg: 'Current Password is Wrong', color: 'danger' })\n      }\n    } catch (err) {\n      console.error('Error:', err)\n      setLoadingButton(false)\n      setServerAlert(true)\n      setAlertDetails({ alertMsg: 'Server Error', color: 'warning' })\n    }\n  }\n\n  function refreshPage() {\n    window.location.reload()\n  }\n\n  const handleClose = () => {\n    setVisible(false)\n  }\n\n  const password = watch('password')\n  useEffect(() => {}, [])\n\n  return (\n    <>\n      <CCol xs={6}>{serverAlert ? <Alert data={alertDetails} /> : null}</CCol>\n      <CRow>\n        <Modal\n          open={visible}\n          close={setVisible}\n          data={refreshPage}\n          onClick={() => {\n            handleClose()\n          }}\n          titleModal={'Updated Successfully'}\n          descModal={'Your password is changed'}\n          visible={visible}\n        />\n        <CCol xs={6}>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Change Password</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CForm onSubmit={handleSubmit(onSubmit)}>\n                <div className=\"mb-3\">\n                  <CFormLabel htmlFor=\"exampleFormControlInput1\">Current Password</CFormLabel>\n                  <CFormInput\n                    type=\"Password\"\n                    id=\"current_password\"\n                    name=\"current_password\"\n                    placeholder=\"Current password\"\n                    invalid={errors.current_password ? true : false}\n                    {...register('current_password', {\n                      required: 'Required',\n                      // minLength: {\n                      //   value: 6,\n                      //   message: 'Must be include more than 6 characters',\n                      // },\n                      // maxLength: {\n                      //   value: 7,\n                      //   message: 'Must be less than 7 characters',\n                      // },\n                      // pattern: {\n                      //   value: /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{6,}$/,\n                      //   message: 'Minimum eight characters, at least one letter and one number:',\n                      // },\n                    })}\n                  />\n                  {errors.current_password && (\n                    <span style={{ color: 'red' }}>{errors.current_password.message}</span>\n                  )}\n                </div>\n                <div className=\"mb-3\">\n                  <CFormLabel htmlFor=\"exampleFormControlInput1\">Password</CFormLabel>\n                  <CFormInput\n                    type=\"Password\"\n                    id=\"password\"\n                    name=\"password\"\n                    placeholder=\"password\"\n                    invalid={errors.password ? true : false}\n                    {...register('password', {\n                      required: 'Required',\n                      pattern: {\n                        value: /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{6,}$/,\n                        message: 'Minimum six characters, at least one letter and one number:',\n                      },\n                    })}\n                  />\n                  {errors.password && (\n                    <span style={{ color: 'red' }}>{errors.password.message}</span>\n                  )}\n                </div>\n                <div className=\"mb-3\">\n                  <CFormLabel htmlFor=\"exampleFormControlInput1\">Confirm Password</CFormLabel>\n                  <CFormInput\n                    type=\"Password\"\n                    id=\"Password2\"\n                    name=\"Password2\"\n                    placeholder=\"Confirm Password\"\n                    invalid={errors.Password2 ? true : false}\n                    {...register('Password2', {\n                      required: 'Required',\n                      validate: (value) => value === password || 'password do no match',\n                    })}\n                  />\n                  {errors.Password2 && (\n                    <span style={{ color: 'red' }}>{errors.Password2.message}</span>\n                  )}\n                </div>\n                <CButton color=\"primary\" className=\"px-4\" type={'submit'}>\n                  {loadingButton ? (\n                    <CSpinner component=\"span\" size=\"sm\" variant=\"grow\" aria-hidden=\"true\" />\n                  ) : undefined}\n                  {loadingButton ? 'Loading' : 'Change'}\n                </CButton>\n              </CForm>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n\nexport default ChangePassword\n","import React, { useEffect, useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CRow,\n  CSpinner,\n} from '@coreui/react'\nimport Alert from 'src/components/alert/Alert'\n\nconst ChangeData = () => {\n  const {\n    reset,\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({ mode: 'onTouched' })\n  const [loadingButton, setLoadingButton] = useState(false)\n  const [userData, setUserData] = useState()\n  var [serverAlert, setServerAlert] = useState(false)\n  const [alertDetails, setAlertDetails] = useState({ alertMsg: '', color: 'success' })\n\n  const loadUserData = async () => {\n    try {\n      const _data = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/staff/profile`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + localStorage.getItem('authToken'),\n        },\n      })\n      if (_data.status === 200) {\n        const data = await _data.json()\n        setUserData(data.user)\n        setLoadingButton(false)\n      }\n    } catch (err) {\n      console.error('Error:', err)\n      setLoadingButton(false)\n      setServerAlert(true)\n      setAlertDetails({ alertMsg: 'Server Error', color: 'warning' })\n    }\n  }\n  const onSubmit = async (data) => {\n    setLoadingButton(true)\n    const id = userData._id\n    try {\n      const _data = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/staff/` + id, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + localStorage.getItem('authToken'),\n        },\n        body: JSON.stringify(data),\n      })\n      if (_data.status === 200) {\n        setLoadingButton(false)\n        setServerAlert(true)\n        setAlertDetails({ alertMsg: 'Updated Successfully', color: 'success' })\n      } else if (_data.status === 409) {\n        setLoadingButton(false)\n        setServerAlert(true)\n        setAlertDetails({ alertMsg: 'User Name already exists', color: 'danger' })\n      } else if (_data.status === 500) {\n        setLoadingButton(false)\n        setServerAlert(true)\n        setAlertDetails({ alertMsg: 'Server Error', color: 'warning' })\n      }\n    } catch (err) {\n      console.error('Error:', err)\n    }\n  }\n\n  useEffect(() => {\n    loadUserData()\n  }, [])\n  useEffect(() => {\n    // reset form with user data\n    reset(userData)\n    //reference = https://jasonwatmore.com/post/2021/09/19/react-hook-form-set-form-values-in-useeffect-hook-after-async-data-load\n  }, [userData])\n  return (\n    <>\n      <CCol xs={6}>{serverAlert ? <Alert data={alertDetails} /> : null}</CCol>\n      <CRow>\n        <CCol xs={6}>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Your Details</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CForm onSubmit={handleSubmit(onSubmit)}>\n                <div className=\"mb-3\">\n                  <CFormLabel htmlFor=\"exampleFormControlInput1\">User Name</CFormLabel>\n                  <CFormInput\n                    type=\"text\"\n                    id=\"userName\"\n                    name=\"userName\"\n                    invalid={errors.userName ? true : false}\n                    {...register('userName', {\n                      required: 'Required',\n                      pattern: {\n                        value: /^[a-zA-Z]+$/,\n                        message: 'Enter valid name',\n                      },\n                    })}\n                  />\n                  {errors.userName && (\n                    <span style={{ color: 'red' }}>{errors.userName.message}</span>\n                  )}\n                </div>\n                <div className=\"mb-3\">\n                  <CFormLabel htmlFor=\"exampleFormControlInput1\">First Name</CFormLabel>\n                  <CFormInput\n                    type=\"text\"\n                    id=\"firstName\"\n                    name=\"firstName\"\n                    invalid={errors.firstName ? true : false}\n                    {...register('firstName', {\n                      required: 'Required',\n                      pattern: {\n                        value: /^[a-zA-Z]+$/,\n                        message: 'Enter valid name',\n                      },\n                    })}\n                  />\n                  {errors.firstName && (\n                    <span style={{ color: 'red' }}>{errors.firstName.message}</span>\n                  )}\n                </div>\n                <div className=\"mb-3\">\n                  <CFormLabel htmlFor=\"exampleFormControlInput1\">Last Name</CFormLabel>\n                  <CFormInput\n                    type=\"text\"\n                    id=\"lastName\"\n                    name=\"lastName\"\n                    invalid={errors.lastName ? true : false}\n                    {...register('lastName', {\n                      required: 'Required',\n                      pattern: {\n                        value: /^[a-zA-Z]+$/, // value: /[A-Za-z]{3}/,value: /[^a-zA-Z\\d]{3}/\n                        message: 'Enter valid name',\n                      },\n                    })}\n                  />\n                  {errors.lastName && (\n                    <span style={{ color: 'red' }}>{errors.lastName.message}</span>\n                  )}\n                </div>\n                <CButton color=\"primary\" className=\"px-4\" type={'submit'}>\n                  {loadingButton ? (\n                    <CSpinner component=\"span\" size=\"sm\" variant=\"grow\" aria-hidden=\"true\" />\n                  ) : undefined}\n                  {loadingButton ? 'Loading' : 'Update'}\n                </CButton>\n              </CForm>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n\nexport default ChangeData\n","import React from 'react'\n\nimport ChangePassword from './changePassword'\nimport ChangeData from './ChangeData'\n\nconst Profile = () => {\n  return (\n    <>\n      <ChangeData />\n      <ChangePassword />\n    </>\n  )\n}\n\nexport default Profile\n"],"sourceRoot":""}