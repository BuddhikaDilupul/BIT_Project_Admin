{"version":3,"sources":["../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getEventValue.ts","../../src/logic/isNameInFieldArray.ts","../../src/logic/getNodeParentName.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/useSubscribe.ts","../../src/utils/isString.ts","../../src/logic/generateWatchOutput.ts","../../src/utils/isFunction.ts","../../src/utils/objectHasFunction.ts","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/logic/generateId.ts","../../src/logic/isWatched.ts","../../src/utils/isWeb.ts","../../src/utils/cloneObject.ts","../../src/utils/unset.ts","../../src/utils/createSubject.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/getValidationModes.ts","../../src/utils/isBoolean.ts","../../src/utils/isFileInput.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/live.ts","../../src/logic/getDirtyFields.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getResolverOptions.ts","../../src/utils/isRegex.ts","../../src/logic/getRuleValue.ts","../../src/logic/hasValidation.ts","../../src/logic/schemaErrorLookup.ts","../../src/logic/skipValidation.ts","../../src/logic/unsetEmptyArray.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/logic/createFormControl.ts","../../src/useForm.ts"],"names":["element","type","value","Date","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","event","isObject","target","isCheckBoxInput","checked","names","name","has","substring","search","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","createContext","formState","_proxyFormState","localProxyFormState","isRoot","Object","defineProperty","get","_key","keys","length","formStateData","isEmptyObject","find","useSubscribe","props","_props","useRef","current","useEffect","subscription","disabled","subject","subscribe","next","callback","unsubscribe","tearDown","_names","formValues","isGlobal","isString","watch","add","map","fieldName","watchAll","data","isFunction","validateAllFieldCriteria","errors","message","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","field","_f","currentField","ref","focus","refs","isBlurEvent","some","watchName","startsWith","slice","window","HTMLElement","document","cloneObject","copy","Set","isWeb","Blob","FileList","unset","updatePath","childObject","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","createSubject","_observers","observers","observer","push","o","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","owner","ownerDocument","defaultView","isRadioInput","isHTMLElement","isConnected","markFieldsDirty","isParentNodeArray","objectHasFunction","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","defaultValues","defaultResult","isValid","validResult","options","values","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","_fields","criteriaMode","shouldUseNativeValidation","RegExp","rule","isRegex","source","mount","required","min","max","maxLength","minLength","pattern","validate","schemaErrorLookup","error","join","foundError","pop","isTouched","isSubmitted","reValidateMode","isValidElement","getValidateError","isMessage","isBoolean","validationData","async","inputValue","inputRef","setCustomValidity","reportValidity","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueDate","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","createFormControl","delayErrorCallback","_options","_formState","isDirty","isValidating","dirtyFields","submitCount","touchedFields","isSubmitting","isSubmitSuccessful","_defaultValues","_formValues","shouldUnregister","_stateFlags","action","unMount","array","timer","validateFields","_subjects","state","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","clearTimeout","setTimeout","_updateValid","resolver","_executeSchema","executeBuildInValidation","shouldSkipRender","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","fieldValues","argA","argB","unsetEmptyArray","getDirtyFields","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","shouldRenderByError","fieldState","previousFieldError","shouldUpdateValid","delayError","updatedFormState","v","context","getResolverOptions","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","fieldError","validateField","_removeUnmounted","live","unregister","getValues","_getWatch","generateWatchOutput","_getFieldArray","forEach","selectRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","cloneValue","isWatched","onChange","getEventValue","shouldSkipValidation","hasValidation","deps","skipValidation","watched","onBlur","previousErrorLookupResult","errorLookupResult","fieldNames","convertToArrayPayload","Promise","all","shouldFocus","getFieldState","invalid","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","register","disabledIsDefined","getRuleValue","fieldRef","querySelectorAll","radioOrCheckbox","isNameInFieldArray","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","resetField","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","keepDirtyValues","closest","keepSubmitCount","keepIsSubmitted","keepErrors","setFocus","shouldSelect","select","control","useForm","_formControl","updateFormState","useState","useCallback","shouldRenderFormState","getProxyFormState"],"mappings":"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","file":"static/js/0.90dad71d.chunk.js","sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is Date => value instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  names.has(getNodeParentName(name));\n","export default (name: string) =>\n  name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n","export default <TValue>(value: TValue[]) =>\n  Array.isArray(value) ? value.filter(Boolean) : [];\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown): any => {\n  if (!path || !isObject(obj)) {\n    return defaultValue;\n  }\n\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) =>\n      isNullOrUndefined(result) ? result : result[key as keyof {}],\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path as keyof T])\n      ? defaultValue\n      : obj[path as keyof T]\n    : result;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  FOCUS_OUT: 'focusout',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import React from 'react';\n\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useFrom methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const FormProvider = <TFieldValues extends FieldValues, TContext = any>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => {\n  const { children, ...data } = props;\n  return (\n    <HookFormContext.Provider value={data as unknown as UseFormReturn}>\n      {props.children}\n    </HookFormContext.Provider>\n  );\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { FieldValues, FormState, ReadFormState } from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  const result = {} as typeof formState;\n\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: () => {\n        const _key = key as keyof FormState<TFieldValues> & keyof ReadFormState;\n\n        if (_proxyFormState[_key] !== VALIDATION_MODE.all) {\n          _proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[_key] = true);\n        return formState[_key];\n      },\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const { name, ...formState } = formStateData;\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const tearDown = (subscription: Subscription | false) => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.callback,\n      });\n\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default (\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) => {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const { _f, ...currentField } = field;\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(currentField)) {\n        focusFieldBy(currentField, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isFunction from './isFunction';\nimport isObject from './isObject';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (\n    !(isWeb && (data instanceof Blob || data instanceof FileList)) &&\n    (isArray || isObject(data))\n  ) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter((data) => !isUndefined(data)).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is HTMLElement => {\n  const owner = value ? ((value as HTMLElement).ownerDocument as Document) : 0;\n  const ElementClass =\n    owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement;\n  return value instanceof ElementClass;\n};\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && ref.isConnected;\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<U>(data: U, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: any,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field, NativeFieldValue } from '../types';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === '' || isNullOrUndefined(value)\n      ? NaN\n      : +value\n    : valueAsDate && isString(value)\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? undefined\n    : isRegex(rule)\n    ? rule.source\n    : isObject(rule)\n    ? isRegex(rule.value)\n      ? rule.value.source\n      : rule.value\n    : rule;\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  InternalFieldErrors,\n  Message,\n  NativeFieldValue,\n} from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends NativeFieldValue>(\n  field: Field,\n  inputValue: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNullOrUndefined(inputValue) && !isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || +inputValue;\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UseFormClearErrors,\n  UseFormGetFieldState,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = cloneObject(_options.defaultValues) || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback | null;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T) =>\n    (wait: number) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(callback, wait);\n    };\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    values = [],\n    method,\n    args,\n    shouldSetValues = true,\n    shouldUpdateFieldsAndState = true,\n  ) => {\n    if (args && method) {\n      _stateFlags.action = true;\n      if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n        const fieldValues = method(get(_fields, name), args.argA, args.argB);\n        shouldSetValues && set(_fields, name, fieldValues);\n      }\n\n      if (\n        _proxyFormState.errors &&\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.errors, name))\n      ) {\n        const errors = method(\n          get(_formState.errors, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.errors, name, errors);\n        unsetEmptyArray(_formState.errors, name);\n      }\n\n      if (\n        _proxyFormState.touchedFields &&\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.touchedFields, name))\n      ) {\n        const touchedFields = method(\n          get(_formState.touchedFields, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      }\n\n      if (_proxyFormState.dirtyFields) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n      }\n\n      _subjects.state.next({\n        isDirty: _getDirty(name, values),\n        dirtyFields: _formState.dirtyFields,\n        errors: _formState.errors,\n        isValid: _formState.isValid,\n      });\n    } else {\n      set(_formValues, name, values);\n    }\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => {\n    set(_formState.errors, name, error);\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs: boolean,\n    value?: unknown,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(\n        _formValues,\n        name,\n        isUndefined(value) ? get(_defaultValues, name) : value,\n      );\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n\n      _stateFlags.mount && _updateValid();\n    }\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isBlurEvent?: boolean,\n    shouldDirty?: boolean,\n    shouldRender?: boolean,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isBlurEvent && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isBlurEvent);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isBlurEvent);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const shouldRenderByError = async (\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback = debounce(() => updateErrors(name, error));\n      delayErrorCallback(props.delayError);\n    } else {\n      clearTimeout(timer);\n      delayErrorCallback = null;\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      (error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n      !isEmptyObject(fieldState) ||\n      shouldUpdateValid\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (\n      _proxyFormState.isValidating &&\n      !Object.values(validateFields).some((v) => v)\n    ) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as TFieldValues,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const { _f: fieldReference, ...fieldValue } = field;\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = <TFieldArrayValues>(\n    name: InternalFieldName,\n  ): Partial<TFieldArrayValues>[] =>\n    compact(\n      get(\n        _stateFlags.mount ? _formValues : _defaultValues,\n        name,\n        props.shouldUnregister ? get(_defaultValues, name, []) : [],\n      ),\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled &&\n          set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    !checkboxRef.disabled &&\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : fieldReference.refs[0] &&\n                (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = '';\n        } else {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.watch.next({\n              name,\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(\n        name,\n        fieldValue,\n        options.shouldTouch,\n        options.shouldDirty,\n        true,\n      );\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U extends SetValueConfig,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    const cloneValue = cloneObject(value);\n\n    set(_formValues, name, cloneValue);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, cloneValue),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(cloneValue)\n        ? setValues(name, cloneValue, options)\n        : setFieldValue(name, cloneValue, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type\n        ? getFieldValue(field._f)\n        : getEventValue(event);\n      const isBlurEvent =\n        event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      set(_formValues, name, fieldValue);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n        delayErrorCallback && delayErrorCallback(0);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _subjects.state.next({\n        isValidating: true,\n      });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps &&\n        trigger(\n          field._f.deps as FieldPath<TFieldValues> | FieldPath<TFieldValues>[],\n        );\n\n      shouldRenderByError(name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const getFieldState: UseFormGetFieldState<TFieldValues> = (\n    name,\n    formState,\n  ) => ({\n    invalid: !!get((formState || _formState).errors, name),\n    isDirty: !!get((formState || _formState).dirtyFields, name),\n    isTouched: !!get((formState || _formState).touchedFields, name),\n    error: get((formState || _formState).errors, name),\n  });\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info) =>\n            name(\n              _getWatch(undefined, defaultValue as DeepPartial<TFieldValues>),\n              info as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as DeepPartial<TFieldValues>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n    const disabledIsDefined = isBoolean(options.disabled);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    field\n      ? disabledIsDefined &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true, options.value);\n\n    return {\n      ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n      ...(_options.shouldUseNativeValidation\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n\n          if (\n            radioOrCheckbox\n              ? refs.find((option: Ref) => option === fieldRef)\n              : fieldRef === field._f.ref\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: {\n              ...field._f,\n              ...(radioOrCheckbox\n                ? {\n                    refs: [\n                      ...refs.filter(live),\n                      fieldRef,\n                      ...(!!Array.isArray(get(_defaultValues, name))\n                        ? [{}]\n                        : []),\n                    ],\n                    ref: { type: fieldRef.type, name },\n                  }\n                : { ref: fieldRef }),\n            },\n          });\n\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = cloneObject(_formValues);\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (isEmptyObject(_formState.errors)) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          if (onInvalid) {\n            await onInvalid({ ..._formState.errors }, e);\n          }\n\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (get(_fields, name)) {\n      if (isUndefined(options.defaultValue)) {\n        setValue(name, get(_defaultValues, name));\n      } else {\n        setValue(name, options.defaultValue);\n        set(_defaultValues, name, options.defaultValue);\n      }\n\n      if (!options.keepTouched) {\n        unset(_formState.touchedFields, name);\n      }\n\n      if (!options.keepDirty) {\n        unset(_formState.dirtyFields, name);\n        _formState.isDirty = options.defaultValue\n          ? _getDirty(name, get(_defaultValues, name))\n          : _getDirty();\n      }\n\n      if (!options.keepError) {\n        unset(_formState.errors, name);\n        _proxyFormState.isValid && _updateValid();\n      }\n\n      _subjects.state.next({ ..._formState });\n    }\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values =\n      formValues && !isEmptyObject(formValues)\n        ? cloneUpdatedValues\n        : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (keepStateOptions.keepDirtyValues) {\n        for (const fieldName of _names.mount) {\n          get(_formState.dirtyFields, fieldName)\n            ? set(values, fieldName, get(_formValues, fieldName))\n            : setValue(\n                fieldName as FieldPath<TFieldValues>,\n                get(values, fieldName),\n              );\n        }\n      } else {\n        if (isWeb && isUndefined(formValues)) {\n          for (const name of _names.mount) {\n            const field = get(_fields, name);\n            if (field && field._f) {\n              const fieldReference = Array.isArray(field._f.refs)\n                ? field._f.refs[0]\n                : field._f.ref;\n\n              try {\n                isHTMLElement(fieldReference) &&\n                  fieldReference.closest('form')!.reset();\n                break;\n              } catch {}\n            }\n          }\n        }\n\n        _fields = {};\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n\n      _subjects.array.next({\n        values,\n      });\n\n      _subjects.watch.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n\n    _stateFlags.watch = !!props.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty:\n        keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\n          ? _formState.isDirty\n          : !!(\n              keepStateOptions.keepDefaultValues &&\n              !deepEqual(formValues, _defaultValues)\n            ),\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields:\n        keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\n          ? _formState.dirtyFields\n          : keepStateOptions.keepDefaultValues && formValues\n          ? getDirtyFields(_defaultValues, formValues)\n          : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name)._f;\n    const fieldRef = field.refs ? field.refs[0] : field.ref;\n    options.shouldSelect ? fieldRef.select() : fieldRef.focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      getFieldState,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n    getFieldState,\n  };\n}\n","import React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\n/**\n * Custom hook to mange the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  const callback = React.useCallback(\n    (value: FieldValues) => {\n      if (shouldRenderFormState(value, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...value,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n    [control],\n  );\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback,\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"sourceRoot":""}