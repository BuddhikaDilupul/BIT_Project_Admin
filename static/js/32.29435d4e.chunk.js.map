{"version":3,"sources":["components/alert/Alert.js","components/modal/Modal.js","views/register/Register.js"],"names":["Alert","props","color","data","alertMsg","Modal","backdrop","visible","open","onClose","close","titleModal","descModal","onClick","itemID","React","memo","Register","register","handleSubmit","watch","formState","errors","useForm","mode","loadingButton","setLoadingButton","useState","reset","setReset","setVisible","serverAlert","setServerAlert","alertDetails","setAlertDetails","refreshPage","window","location","reload","password","xs","className","onSubmit","async","_data","fetch","process","method","headers","Authorization","localStorage","getItem","body","JSON","stringify","status","err","console","error","htmlFor","type","id","name","placeholder","invalid","userName","required","pattern","value","message","style","email","firstName","lastName","minLength","maxLength","Password2","validate"],"mappings":"6KAAA,0BAceA,IAVAC,GAEX,mCACE,cAAC,IAAD,CAAQC,MAAOD,EAAME,KAAKD,MAA1B,SACE,iCAASD,EAAME,KAAKC,gB,iCCR5B,qCAGA,MAAMC,EAASJ,GAEX,mCACE,eAAC,IAAD,CAAQK,SAAS,SAASC,QAASN,EAAMO,KAAMC,QAAS,IAAMR,EAAMS,QAApE,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UAAcT,EAAMU,eAEtB,cAAC,IAAD,UAAaV,EAAMW,YACnB,eAAC,IAAD,WACE,cAAC,IAAD,CAASV,MAAM,YAAYW,QAAS,IAAMZ,EAAMS,QAAhD,mBAGA,cAAC,IAAD,CACER,MAAM,UACNW,QAAS,KACPZ,EAAME,KAAKF,EAAMa,QACjBb,EAAMS,SAJV,wBAcKK,QAAMC,KAAKX,I,iCC7B1B,8DAgOeY,UA9ME,KACf,MAAM,SACJC,EADI,aAEJC,EAFI,MAGJC,EACAC,WAAW,OAAEC,IACXC,YAAQ,CAAEC,KAAM,eACbC,EAAeC,GAAoBC,oBAAS,IAC5CC,EAAOC,GAAYF,oBAAS,IAC5BpB,EAASuB,GAAcH,qBAC9B,IAAKI,EAAaC,GAAkBL,oBAAS,GAC7C,MAAOM,EAAcC,GAAmBP,mBAAS,CAAEvB,SAAU,GAAIF,MAAO,YACxE,SAASiC,IACPC,OAAOC,SAASC,SAElB,MAmCMC,EAAWnB,EAAM,YACvB,OACE,qCACE,cAAC,IAAD,CACEZ,KAAMD,EACNG,MAAoByB,EACpBhC,KAAMgC,EAENtB,QAAS,KAXbiB,GAAW,GACXK,KAaIxB,WAAY,0BACZC,UAAW,2CACXL,QAASA,IAEX,cAAC,IAAD,CAAMiC,GAAI,EAAV,SAAcT,EAAc,cAAC,IAAD,CAAO5B,KAAM8B,IAAmB,OAC5D,cAAC,IAAD,UACE,cAAC,IAAD,CAAMO,GAAI,EAAV,SACE,eAAC,IAAD,CAAOC,UAAU,OAAjB,UACE,cAAC,IAAD,UACE,wDAEF,cAAC,IAAD,UACE,eAAC,IAAD,CAAOC,SAAUvB,GA1DZwB,UACf,IACE,MAAMC,QAAcC,MAAM,GAAD,OAAIC,yCAAJ,eAAoD,CAC3EC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,cAAe,UAAYC,aAAaC,QAAQ,cAElDC,KAAMC,KAAKC,UAAUnD,KAEF,MAAjByC,EAAMW,QACR7B,GAAiB,GACjBM,GAAe,GACfE,EAAgB,CAAE9B,SAAU,uBAAwBF,MAAO,YAC3D4B,GAAW,IACe,MAAjBc,EAAMW,QACf7B,GAAiB,GACjBM,GAAe,GACfE,EAAgB,CAAE9B,SAAU,oCAAqCF,MAAO,YAC9C,MAAjB0C,EAAMW,SACfvB,GAAe,GACfE,EAAgB,CAAE9B,SAAU,0CAA2CF,MAAO,YAEhF,MAAOsD,GACPC,QAAQC,MAAM,SAAUF,GACxB9B,GAAiB,GACjBM,GAAe,GACfE,EAAgB,CAAE9B,SAAU,eAAgBF,MAAO,gBA+B3C,UACE,sBAAKuC,UAAU,OAAf,UACE,cAAC,IAAD,CAAYkB,QAAQ,2BAApB,uBACA,cAAC,IAAD,CACEC,KAAK,OACLC,GAAG,WACHC,KAAK,WACLC,YAAY,QACZC,UAAS1C,EAAO2C,YACZ/C,EAAS,WAAY,CACvBgD,SAAU,WACVC,QAAS,CACPC,MAAO,cACPC,QAAS,wBAId/C,EAAO2C,UACN,sBAAMK,MAAO,CAAEpE,MAAO,OAAtB,SAAgCoB,EAAO2C,SAASI,aAGpD,sBAAK5B,UAAU,OAAf,UACE,cAAC,IAAD,CAAYkB,QAAQ,2BAApB,mBACA,cAAC,IAAD,CACEC,KAAK,OACLC,GAAG,QACHC,KAAK,QACLC,YAAY,gBACZC,UAAS1C,EAAOiD,SACZrD,EAAS,QAAS,CACpBgD,SAAU,WACVC,QAAS,CACPC,MACE,6GACFC,QAAS,0BAId/C,EAAOiD,OAAS,sBAAMD,MAAO,CAAEpE,MAAO,OAAtB,SAAgCoB,EAAOiD,MAAMF,aAEhE,sBAAK5B,UAAU,OAAf,UACE,cAAC,IAAD,CAAYkB,QAAQ,2BAApB,wBACA,cAAC,IAAD,CACEC,KAAK,OACLC,GAAG,YACHC,KAAK,YACLC,YAAY,aACZC,UAAS1C,EAAOkD,aACZtD,EAAS,YAAa,CACxBgD,SAAU,WACVC,QAAS,CACPC,MAAO,cACPC,QAAS,wBAId/C,EAAOkD,WACN,sBAAMF,MAAO,CAAEpE,MAAO,OAAtB,SAAgCoB,EAAOkD,UAAUH,aAGrD,sBAAK5B,UAAU,OAAf,UACE,cAAC,IAAD,CAAYkB,QAAQ,2BAApB,uBACA,cAAC,IAAD,CACEC,KAAK,OACLC,GAAG,WACHC,KAAK,WACLC,YAAY,YACZC,UAAS1C,EAAOmD,YACZvD,EAAS,WAAY,CACvBgD,SAAU,WACVC,QAAS,CACPC,MAAO,cACPC,QAAS,wBAId/C,EAAOmD,UACN,sBAAMH,MAAO,CAAEpE,MAAO,OAAtB,SAAgCoB,EAAOmD,SAASJ,aAGpD,sBAAK5B,UAAU,OAAf,UACE,cAAC,IAAD,CAAYkB,QAAQ,2BAApB,sBACA,cAAC,IAAD,CACEC,KAAK,WACLC,GAAG,WACHC,KAAK,WACLC,YAAY,WACZC,UAAS1C,EAAOiB,YACZrB,EAAS,WAAY,CACvBgD,SAAU,WACVQ,UAAW,CACTN,MAAO,EACPC,QAAS,0CAEXM,UAAW,CACTP,MAAO,EACPC,QAAS,sCAId/C,EAAOiB,UACN,sBAAM+B,MAAO,CAAEpE,MAAO,OAAtB,SAAgCoB,EAAOiB,SAAS8B,aAGpD,sBAAK5B,UAAU,OAAf,UACE,cAAC,IAAD,CAAYkB,QAAQ,2BAApB,8BACA,cAAC,IAAD,CACEC,KAAK,WACLC,GAAG,YACHC,KAAK,YACLC,YAAY,mBACZC,UAAS1C,EAAOsD,aACZ1D,EAAS,YAAa,CACxBgD,SAAU,WACVW,SAAWT,GAAUA,IAAU7B,GAAY,2BAG9CjB,EAAOsD,WACN,sBAAMN,MAAO,CAAEpE,MAAO,OAAtB,SAAgCoB,EAAOsD,UAAUP,aAGrD,cAAC,IAAD,CAASnE,MAAO,UAAW0D,KAAM,SAAjC","file":"static/js/32.29435d4e.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { CAlert } from '@coreui/react'\n\nconst Alert = (props) => {\n  return (\n    <>\n      <CAlert color={props.data.color}>\n        <strong>{props.data.alertMsg}</strong>\n      </CAlert>\n    </>\n  )\n}\n\nexport default Alert\nAlert.propTypes = {\n  data: PropTypes.object,\n}\n","import React from 'react'\nimport { CButton, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle } from '@coreui/react'\nimport PropTypes from 'prop-types'\nconst Modal = (props) => {\n  return (\n    <>\n      <CModal backdrop=\"static\" visible={props.open} onClose={() => props.close()}>\n        <CModalHeader>\n          <CModalTitle>{props.titleModal}</CModalTitle>\n        </CModalHeader>\n        <CModalBody>{props.descModal}</CModalBody>\n        <CModalFooter>\n          <CButton color=\"secondary\" onClick={() => props.close()}>\n            Close\n          </CButton>\n          <CButton\n            color=\"primary\"\n            onClick={() => {\n              props.data(props.itemID)\n              props.close()\n            }}\n          >\n            Ok\n          </CButton>\n        </CModalFooter>\n      </CModal>\n    </>\n  )\n}\nexport default React.memo(Modal)\nModal.propTypes = {\n  open: PropTypes.bool,\n  close: PropTypes.func,\n  onClick: PropTypes.func,\n  itemID: PropTypes.string,\n  data: PropTypes.func,\n  titleModal: PropTypes.string,\n  descModal: PropTypes.string,\n}\n","import React, { useEffect, useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormFloating,\n  CFormInput,\n  CFormLabel,\n  CFormTextarea,\n  CRow,\n} from '@coreui/react'\nimport Alert from 'src/components/alert/Alert'\nimport Modal from '../../components/modal/Modal'\n\nconst Register = () => {\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: { errors },\n  } = useForm({ mode: 'onTouched' })\n  const [loadingButton, setLoadingButton] = useState(false)\n  const [reset, setReset] = useState(false)\n  const [visible, setVisible] = useState()\n  var [serverAlert, setServerAlert] = useState(false)\n  const [alertDetails, setAlertDetails] = useState({ alertMsg: '', color: 'success' })\n  function refreshPage() {\n    window.location.reload()\n  }\n  const onSubmit = async (data) => {\n    try {\n      const _data = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/staff/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + localStorage.getItem('authToken'),\n        },\n        body: JSON.stringify(data),\n      })\n      if (_data.status === 201) {\n        setLoadingButton(false)\n        setServerAlert(false)\n        setAlertDetails({ alertMsg: 'Updated Successfully', color: 'success' })\n        setVisible(true)\n      } else if (_data.status === 409) {\n        setLoadingButton(false)\n        setServerAlert(true)\n        setAlertDetails({ alertMsg: 'User Name or email already exists', color: 'danger' })\n      } else if (_data.status === 422) {\n        setServerAlert(true)\n        setAlertDetails({ alertMsg: 'Wrong input. You can check email domain', color: 'danger' })\n      }\n    } catch (err) {\n      console.error('Error:', err)\n      setLoadingButton(false)\n      setServerAlert(true)\n      setAlertDetails({ alertMsg: 'Server Error', color: 'warning' })\n    }\n  }\n\n  const handleClose = () => {\n    setVisible(false)\n    refreshPage()\n  }\n  const password = watch('password')\n  return (\n    <>\n      <Modal\n        open={visible}\n        close={(setVisible, refreshPage)}\n        data={refreshPage}\n        // itemID={deleteItem}\n        onClick={() => {\n          handleClose()\n        }}\n        titleModal={'User Added Successfully'}\n        descModal={'Employee can now login using credentials'}\n        visible={visible}\n      />\n      <CCol xs={6}>{serverAlert ? <Alert data={alertDetails} /> : null}</CCol>\n      <CRow>\n        <CCol xs={6}>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Add New Employee</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CForm onSubmit={handleSubmit(onSubmit)}>\n                <div className=\"mb-3\">\n                  <CFormLabel htmlFor=\"exampleFormControlInput1\">User Name</CFormLabel>\n                  <CFormInput\n                    type=\"text\"\n                    id=\"userName\"\n                    name=\"userName\"\n                    placeholder=\"Kamal\"\n                    invalid={errors.userName ? true : false}\n                    {...register('userName', {\n                      required: 'Required',\n                      pattern: {\n                        value: /^[a-zA-Z]+$/,\n                        message: 'Enter valid name',\n                      },\n                    })}\n                  />\n                  {errors.userName && (\n                    <span style={{ color: 'red' }}>{errors.userName.message}</span>\n                  )}\n                </div>\n                <div className=\"mb-3\">\n                  <CFormLabel htmlFor=\"exampleFormControlInput1\">Email</CFormLabel>\n                  <CFormInput\n                    type=\"text\"\n                    id=\"email\"\n                    name=\"email\"\n                    placeholder=\"abc@gmail.com\"\n                    invalid={errors.email ? true : false}\n                    {...register('email', {\n                      required: 'Required',\n                      pattern: {\n                        value:\n                          /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/i,\n                        message: 'Enter valid e-mail',\n                      },\n                    })}\n                  />\n                  {errors.email && <span style={{ color: 'red' }}>{errors.email.message}</span>}\n                </div>\n                <div className=\"mb-3\">\n                  <CFormLabel htmlFor=\"exampleFormControlInput1\">First Name</CFormLabel>\n                  <CFormInput\n                    type=\"text\"\n                    id=\"firstName\"\n                    name=\"firstName\"\n                    placeholder=\"First Name\"\n                    invalid={errors.firstName ? true : false}\n                    {...register('firstName', {\n                      required: 'Required',\n                      pattern: {\n                        value: /^[a-zA-Z]+$/,\n                        message: 'Enter valid name',\n                      },\n                    })}\n                  />\n                  {errors.firstName && (\n                    <span style={{ color: 'red' }}>{errors.firstName.message}</span>\n                  )}\n                </div>\n                <div className=\"mb-3\">\n                  <CFormLabel htmlFor=\"exampleFormControlInput1\">Last Name</CFormLabel>\n                  <CFormInput\n                    type=\"text\"\n                    id=\"lastName\"\n                    name=\"lastName\"\n                    placeholder=\"Last Name\"\n                    invalid={errors.lastName ? true : false}\n                    {...register('lastName', {\n                      required: 'Required',\n                      pattern: {\n                        value: /^[a-zA-Z]+$/, // value: /[A-Za-z]{3}/,value: /[^a-zA-Z\\d]{3}/\n                        message: 'Enter valid name',\n                      },\n                    })}\n                  />\n                  {errors.lastName && (\n                    <span style={{ color: 'red' }}>{errors.lastName.message}</span>\n                  )}\n                </div>\n                <div className=\"mb-3\">\n                  <CFormLabel htmlFor=\"exampleFormControlInput1\">Password</CFormLabel>\n                  <CFormInput\n                    type=\"Password\"\n                    id=\"password\"\n                    name=\"password\"\n                    placeholder=\"password\"\n                    invalid={errors.password ? true : false}\n                    {...register('password', {\n                      required: 'Required',\n                      minLength: {\n                        value: 4,\n                        message: 'Must be include more than 4 characters',\n                      },\n                      maxLength: {\n                        value: 6,\n                        message: 'Must be less than 7 characters',\n                      },\n                    })}\n                  />\n                  {errors.password && (\n                    <span style={{ color: 'red' }}>{errors.password.message}</span>\n                  )}\n                </div>\n                <div className=\"mb-3\">\n                  <CFormLabel htmlFor=\"exampleFormControlInput1\">Confirm Password</CFormLabel>\n                  <CFormInput\n                    type=\"Password\"\n                    id=\"Password2\"\n                    name=\"Password2\"\n                    placeholder=\"Confirm Password\"\n                    invalid={errors.Password2 ? true : false}\n                    {...register('Password2', {\n                      required: 'Required',\n                      validate: (value) => value === password || 'password do no match',\n                    })}\n                  />\n                  {errors.Password2 && (\n                    <span style={{ color: 'red' }}>{errors.Password2.message}</span>\n                  )}\n                </div>\n                <CButton color={'primary'} type={'submit'}>\n                  Submit\n                </CButton>\n              </CForm>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n\nexport default Register\n"],"sourceRoot":""}