{"version":3,"sources":["components/alert/Alert.js","views/reports/LocationReports.js"],"names":["Alert","props","color","data","alertMsg","LocationReports","city","setCity","useState","serverAlert","setServerAlert","alertDetails","setAlertDetails","count","setCount","loadingButton","setLoadingButton","value","setValue","state","setState","startDate","Date","endDate","addDays","key","clearData","splice","length","xs","sm","className","onChange","item","selection","showSelectionPreview","moveRangeOnFirstSelection","months","ranges","direction","maxDate","size","onClick","async","_data","fetch","process","method","headers","Authorization","localStorage","getItem","body","JSON","stringify","json","status","i","push","err","console","log","loadData","component","variant","undefined","labels","datasets","label","backgroundColor"],"mappings":"6KAAA,0BAceA,IAVAC,GAEX,mCACE,cAAC,IAAD,CAAQC,MAAOD,EAAME,KAAKD,MAA1B,SACE,iCAASD,EAAME,KAAKC,gB,iCCR5B,uFAoIeC,UA5HS,KACtB,MAAOC,EAAMC,GAAWC,mBAAS,KAC1BC,EAAaC,GAAkBF,oBAAS,IACxCG,EAAcC,GAAmBJ,mBAAS,CAAEJ,SAAU,GAAIF,MAAO,aACjEW,EAAOC,GAAYN,mBAAS,KAC5BO,EAAeC,GAAoBR,oBAAS,IAC5CS,EAAOC,GAAYV,mBAAS,CAAC,aAC7BW,EAAOC,GAAYZ,mBAAS,CACjC,CACEa,UAAW,IAAIC,KACfC,QAASC,kBAAQ,IAAIF,KAAQ,GAC7BG,IAAK,eAuCHC,EAAY,KAChBb,EAAMc,OAAO,EAAGd,EAAMe,QACtBtB,EAAKqB,OAAO,EAAGrB,EAAKsB,SAEtB,OACE,gCACE,cAAC,IAAD,CAAMC,GAAI,EAAV,SAAcpB,EAAc,cAAC,IAAD,CAAON,KAAMQ,IAAmB,OAC5D,cAAC,IAAD,UACE,cAAC,IAAD,CAAMkB,GAAI,GAAIC,GAAI,GAAlB,SACE,eAAC,IAAD,CAAOC,UAAU,OAAjB,UACE,cAAC,IAAD,UACE,0DAEF,cAAC,IAAD,UACE,eAAC,IAAD,CAAOA,UAAU,UAAjB,UACE,qBAAKA,UAAU,WAAf,SACE,cAAC,kBAAD,CACEC,SAAWC,GAASb,EAAS,CAACa,EAAKC,YACnCC,sBAAsB,EACtBC,2BAA2B,EAC3BC,OAAQ,EACRC,OAAQnB,EACRoB,UAAU,aACVC,QAAS,IAAIlB,SAGjB,qBAAKS,UAAU,WAAf,SACE,eAAC,IAAD,CACE7B,MAAM,UACNuC,KAAK,KACLV,UAAU,OACVW,QAAS,KAlEVC,WACfjB,IAEA,IACEV,GAAiB,GACjBN,GAAe,GACf,MAAMkC,QAAcC,MAAM,GAAD,OAAIC,yCAAJ,yBAA8D,CACrFC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,cAAe,UAAYC,aAAaC,QAAQ,cAElDC,KAAMC,KAAKC,UAAU,CAAEnC,YAGnBhB,QAAayC,EAAMW,OAEzB,GAAqB,MAAjBX,EAAMY,OACR,IAAK,IAAIC,EAAI,EAAGA,EAAItD,EAAKyB,OAAQ6B,IAC/BnD,EAAKoD,KAAKvD,EAAKsD,GAAG,IAClB5C,EAAM6C,KAAKvD,EAAKsD,GAAG,IAEF,MAAjBb,EAAMY,SACR9C,GAAe,GACfE,EAAgB,CAAER,SAAU,gBAAiBF,MAAO,aAEtDc,GAAiB,GACjB,MAAO2C,GACPjD,GAAe,GACfE,EAAgB,CAAER,SAAU,gBAAiBF,MAAO,YACpDc,GAAiB,GACjB4C,QAAQC,IAAIF,KAoCIG,IALJ,UAQG/C,EACC,cAAC,IAAD,CAAUgD,UAAU,OAAOtB,KAAK,KAAKuB,QAAQ,OAAO,cAAY,cAC9DC,EACHlD,EAAgB,UAAY,4BAQ1CT,EAAKsB,OAAS,EACb,cAAC,IAAD,CAAMC,GAAI,GAAV,SACE,eAAC,IAAD,CAAOE,UAAU,OAAjB,UACE,cAAC,IAAD,UACE,0DAEF,cAAC,IAAD,UACE,cAAC,IAAD,CACE5B,KAAM,CACJ+D,OAAQ5D,EACR6D,SAAU,CACR,CACEC,MAAO,eACPC,gBAAiB,UACjBlE,KAAMU,KAIZqD,OAAO,kBAKb","file":"static/js/34.d35fbeb1.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { CAlert } from '@coreui/react'\n\nconst Alert = (props) => {\n  return (\n    <>\n      <CAlert color={props.data.color}>\n        <strong>{props.data.alertMsg}</strong>\n      </CAlert>\n    </>\n  )\n}\n\nexport default Alert\nAlert.propTypes = {\n  data: PropTypes.object,\n}\n","import React, { useState } from 'react'\nimport { CButton, CCard, CCardBody, CCardHeader, CCol, CForm, CRow, CSpinner } from '@coreui/react'\nimport { CChartBar } from '@coreui/react-chartjs'\nimport 'react-date-range/dist/styles.css' // main css file\nimport 'react-date-range/dist/theme/default.css' // theme css file\nimport { addDays } from 'date-fns'\nimport { DateRangePicker } from 'react-date-range'\nimport Alert from 'src/components/alert/Alert'\nconst LocationReports = () => {\n  const [city, setCity] = useState([])\n  const [serverAlert, setServerAlert] = useState(false)\n  const [alertDetails, setAlertDetails] = useState({ alertMsg: '', color: 'success' })\n  const [count, setCount] = useState([])\n  const [loadingButton, setLoadingButton] = useState(false)\n  const [value, setValue] = useState(['#FF6384'])\n  const [state, setState] = useState([\n    {\n      startDate: new Date(),\n      endDate: addDays(new Date(), 0),\n      key: 'selection',\n    },\n  ])\n\n  const loadData = async () => {\n    clearData()\n\n    try {\n      setLoadingButton(true)\n      setServerAlert(false)\n      const _data = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/reports/delivery`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + localStorage.getItem('authToken'),\n        },\n        body: JSON.stringify({ state }),\n      })\n\n      const data = await _data.json()\n\n      if (_data.status === 200)\n        for (let i = 0; i < data.length; i++) {\n          city.push(data[i][0])\n          count.push(data[i][1])\n        }\n      if (_data.status === 404) {\n        setServerAlert(true)\n        setAlertDetails({ alertMsg: 'No data found', color: 'warning' })\n      }\n      setLoadingButton(false)\n    } catch (err) {\n      setServerAlert(true)\n      setAlertDetails({ alertMsg: 'No data found', color: 'warning' })\n      setLoadingButton(false)\n      console.log(err)\n    }\n  }\n  //clear all prev data\n  const clearData = () => {\n    count.splice(0, count.length)\n    city.splice(0, city.length)\n  }\n  return (\n    <div>\n      <CCol xs={6}>{serverAlert ? <Alert data={alertDetails} /> : null}</CCol>\n      <CRow>\n        <CCol xs={12} sm={12}>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Most Ordered City </strong>\n            </CCardHeader>\n            <CCardBody>\n              <CForm className=\"row g-4\">\n                <div className=\"col-auto\">\n                  <DateRangePicker\n                    onChange={(item) => setState([item.selection])}\n                    showSelectionPreview={true}\n                    moveRangeOnFirstSelection={false}\n                    months={1}\n                    ranges={state}\n                    direction=\"horizontal\"\n                    maxDate={new Date()}\n                  />\n                </div>\n                <div className=\"col-auto\">\n                  <CButton\n                    color=\"primary\"\n                    size=\"sm\"\n                    className=\"px-4\"\n                    onClick={() => {\n                      loadData()\n                    }}\n                  >\n                    {loadingButton ? (\n                      <CSpinner component=\"span\" size=\"sm\" variant=\"grow\" aria-hidden=\"true\" />\n                    ) : undefined}\n                    {loadingButton ? 'Loading' : 'Generate'}\n                  </CButton>\n                </div>\n              </CForm>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      {city.length > 0 ? (\n        <CCol xs={12}>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Most Ordered City </strong>\n            </CCardHeader>\n            <CCardBody>\n              <CChartBar\n                data={{\n                  labels: city,\n                  datasets: [\n                    {\n                      label: 'Orders count',\n                      backgroundColor: '#f87979',\n                      data: count,\n                    },\n                  ],\n                }}\n                labels=\"cities\"\n              />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      ) : null}\n    </div>\n  )\n}\n\nexport default LocationReports\n"],"sourceRoot":""}