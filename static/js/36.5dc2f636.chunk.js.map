{"version":3,"sources":["components/alert/Alert.js","views/reports/ProductsReports.js"],"names":["Alert","props","color","data","alertMsg","ProductReports","products","setProducts","useState","count","setCount","value","setValue","alertDetails","setAlertDetails","serverAlert","setServerAlert","loadingButton","setLoadingButton","state","setState","startDate","Date","endDate","addDays","key","clearData","splice","length","xs","sm","className","onChange","item","selection","showSelectionPreview","moveRangeOnFirstSelection","months","ranges","direction","maxDate","size","onClick","async","_data","fetch","process","method","headers","Authorization","localStorage","getItem","body","JSON","stringify","status","json","i","push","err","console","log","loadData","component","variant","undefined","labels","datasets","label","backgroundColor"],"mappings":"6KAAA,0BAceA,IAVAC,GAEX,mCACE,cAAC,IAAD,CAAQC,MAAOD,EAAME,KAAKD,MAA1B,SACE,iCAASD,EAAME,KAAKC,gB,iCCR5B,uFA6IeC,UA1HQ,KACrB,MAAOC,EAAUC,GAAeC,mBAAS,KAClCC,EAAOC,GAAYF,mBAAS,KAC5BG,EAAOC,GAAYJ,mBAAS,CAAC,aAC7BK,EAAcC,GAAmBN,mBAAS,CAAEJ,SAAU,GAAIF,MAAO,aACjEa,EAAaC,GAAkBR,oBAAS,IACxCS,EAAeC,GAAoBV,oBAAS,IAC5CW,EAAOC,GAAYZ,mBAAS,CACjC,CACEa,UAAW,IAAIC,KACfC,QAASC,kBAAQ,IAAIF,KAAQ,GAC7BG,IAAK,eAoCHC,EAAY,KAChBjB,EAAMkB,OAAO,EAAGlB,EAAMmB,QACtBtB,EAASqB,OAAO,EAAGrB,EAASsB,SAE9B,OACE,gCACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAMC,GAAI,EAAV,SAAcd,EAAc,cAAC,IAAD,CAAOZ,KAAMU,IAAmB,OAE5D,cAAC,IAAD,CAAMgB,GAAI,GAAIC,GAAI,GAAlB,SACE,eAAC,IAAD,CAAOC,UAAU,OAAjB,UACE,cAAC,IAAD,UACE,gEAEF,cAAC,IAAD,UACE,eAAC,IAAD,CAAOA,UAAU,UAAjB,UACE,qBAAKA,UAAU,WAAf,SACE,cAAC,kBAAD,CACEC,SAAWC,GAASb,EAAS,CAACa,EAAKC,YACnCC,sBAAsB,EACtBC,2BAA2B,EAC3BC,OAAQ,EACRC,OAAQnB,EACRoB,UAAU,aACVC,QAAS,IAAIlB,SAGjB,qBAAKS,UAAU,WAAf,SACE,eAAC,IAAD,CACE7B,MAAM,UACNuC,KAAK,KACLV,UAAU,OACVW,QAAS,KAhEVC,WACfjB,IACA,IACER,GAAiB,GACjB,MAAM0B,QAAcC,MAAM,GAAD,OAAIC,yCAAJ,wBAA6D,CACpFC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,cAAe,UAAYC,aAAaC,QAAQ,cAElDC,KAAMC,KAAKC,UAAU,CAAEnC,YAEzB,GAAqB,MAAjByB,EAAMW,OAAgB,CACxB,MAAMpD,QAAayC,EAAMY,OACzBxC,GAAe,GAEf,IAAK,IAAIyC,EAAI,EAAGA,EAAItD,EAAKyB,OAAQ6B,IAC/BnD,EAASoD,KAAKvD,EAAKsD,GAAG,IACtBhD,EAAMiD,KAAKvD,EAAKsD,GAAG,IAErBvC,GAAiB,GAEE,MAAjB0B,EAAMW,SACRvC,GAAe,GACfF,EAAgB,CAAEV,SAAU,gBAAiBF,MAAO,YACpDgB,GAAiB,IAEnB,MAAOyC,GACPC,QAAQC,IAAIF,KAqCIG,IALJ,UAQG7C,EACC,cAAC,IAAD,CAAU8C,UAAU,OAAOtB,KAAK,KAAKuB,QAAQ,OAAO,cAAY,cAC9DC,EACHhD,EAAgB,UAAY,6BAQ1CX,EAASsB,OAAS,EACjB,cAAC,IAAD,CAAMC,GAAI,GAAV,SACE,eAAC,IAAD,CAAOE,UAAU,OAAjB,UACE,cAAC,IAAD,UACE,gEAEF,cAAC,IAAD,UACE,cAAC,IAAD,CACE5B,KAAM,CACJ+D,OAAQ5D,EACR6D,SAAU,CACR,CACEC,MAAO,aACPC,gBAAiB,UACjBlE,KAAMM,KAIZyD,OAAO,kBAKb","file":"static/js/36.5dc2f636.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { CAlert } from '@coreui/react'\n\nconst Alert = (props) => {\n  return (\n    <>\n      <CAlert color={props.data.color}>\n        <strong>{props.data.alertMsg}</strong>\n      </CAlert>\n    </>\n  )\n}\n\nexport default Alert\nAlert.propTypes = {\n  data: PropTypes.object,\n}\n","import React, { useEffect, useState } from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CRow,\n  CSpinner,\n} from '@coreui/react'\nimport { CChartBar, CChartLine, CChartPie } from '@coreui/react-chartjs'\nimport 'react-date-range/dist/styles.css' // main css file\nimport 'react-date-range/dist/theme/default.css' // theme css file\nimport { addDays } from 'date-fns'\nimport Alert from 'src/components/alert/Alert'\nimport { DateRangePicker } from 'react-date-range'\n\nconst ProductReports = () => {\n  const [products, setProducts] = useState([])\n  const [count, setCount] = useState([])\n  const [value, setValue] = useState(['#FF6384'])\n  const [alertDetails, setAlertDetails] = useState({ alertMsg: '', color: 'success' })\n  const [serverAlert, setServerAlert] = useState(false)\n  const [loadingButton, setLoadingButton] = useState(false)\n  const [state, setState] = useState([\n    {\n      startDate: new Date(),\n      endDate: addDays(new Date(), 0),\n      key: 'selection',\n    },\n  ])\n\n  const loadData = async () => {\n    clearData()\n    try {\n      setLoadingButton(true)\n      const _data = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/reports/product`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + localStorage.getItem('authToken'),\n        },\n        body: JSON.stringify({ state }),\n      })\n      if (_data.status === 200) {\n        const data = await _data.json()\n        setServerAlert(false)\n\n        for (let i = 0; i < data.length; i++) {\n          products.push(data[i][0])\n          count.push(data[i][1])\n        }\n        setLoadingButton(false)\n      }\n      if (_data.status === 404) {\n        setServerAlert(true)\n        setAlertDetails({ alertMsg: 'No data found', color: 'warning' })\n        setLoadingButton(false)\n      }\n    } catch (err) {\n      console.log(err)\n    }\n  }\n  //clear all prev data\n  const clearData = () => {\n    count.splice(0, count.length)\n    products.splice(0, products.length)\n  }\n  return (\n    <div>\n      <CRow>\n        <CCol xs={6}>{serverAlert ? <Alert data={alertDetails} /> : null}</CCol>\n\n        <CCol xs={12} sm={12}>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Summery of Sold Products</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CForm className=\"row g-4\">\n                <div className=\"col-auto\">\n                  <DateRangePicker\n                    onChange={(item) => setState([item.selection])}\n                    showSelectionPreview={true}\n                    moveRangeOnFirstSelection={false}\n                    months={1}\n                    ranges={state}\n                    direction=\"horizontal\"\n                    maxDate={new Date()}\n                  />\n                </div>\n                <div className=\"col-auto\">\n                  <CButton\n                    color=\"primary\"\n                    size=\"sm\"\n                    className=\"px-4\"\n                    onClick={() => {\n                      loadData()\n                    }}\n                  >\n                    {loadingButton ? (\n                      <CSpinner component=\"span\" size=\"sm\" variant=\"grow\" aria-hidden=\"true\" />\n                    ) : undefined}\n                    {loadingButton ? 'Loading' : 'Generate'}\n                  </CButton>\n                </div>\n              </CForm>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n      {products.length > 0 ? (\n        <CCol xs={12}>\n          <CCard className=\"mb-4\">\n            <CCardHeader>\n              <strong>Summery of Sold Products</strong>\n            </CCardHeader>\n            <CCardBody>\n              <CChartBar\n                data={{\n                  labels: products,\n                  datasets: [\n                    {\n                      label: 'Sold count',\n                      backgroundColor: '#f87979',\n                      data: count,\n                    },\n                  ],\n                }}\n                labels=\"months\"\n              />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      ) : null}\n    </div>\n  )\n}\n\nexport default ProductReports\n"],"sourceRoot":""}